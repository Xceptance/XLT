<?xml version="1.0" encoding="UTF-8"?>

<project name="XLT-Test" basedir=".." default="test.full" xmlns:resolver="antlib:org.apache.maven.resolver.ant">

    <property file="build.properties" />

    <!-- cobertura -->
    <property name="instrumented.classes.dir" value="${build.dir}/instrumented-classes" />

    <!-- junit properties -->
    <property name="reports.junit" value="${build.doc.dir}/junit" />
    <property name="reports.junit.xml" value="${reports.junit}/xml" />
    <property name="reports.junit.html" value="${reports.junit}/html" />
    <property name="reports.junit-hu" value="${build.doc.dir}/junit-hu" />
    <property name="reports.junit-hu.xml" value="${reports.junit-hu}/xml" />
    <property name="reports.junit-hu.html" value="${reports.junit-hu}/html" />

    <!-- checkstyle -->
    <property name="reports.checkstyle" value="${build.doc.dir}/checkstyle" />
    <property name="reports.checkstyle.xml" value="${reports.checkstyle}/xml" />
    <property name="reports.checkstyle.html" value="${reports.checkstyle}/html" />

    <!-- PMD results -->
    <property name="reports.pmd" value="${build.doc.dir}/pmd" />

    <!-- coverage tool properties -->
    <property name="reports.coverage" value="${build.doc.dir}/coverage" />
    <property name="reports.coverage.html" value="${reports.coverage}/html" />

    <!-- JSLint results -->
    <property name="reports.jslint" value="${build.doc.dir}/jslint" />
    <property name="reports.jslint.xml" value="${reports.jslint}/xml" />
    <property name="reports.jslint.html" value="${reports.jslint}/html" />

    <!-- Jetty -->
    <property name="jetty.dir" value="${basedir}/samples/app-server" />
    <property name="jetty.lib.dir" value="${jetty.dir}/lib" />
    <property name="jetty.conf.dir" value="${jetty.dir}/config" />

    <!-- Posters -->
    <property name="posters.testsuite.dir" value="${basedir}/samples/testsuite-posters" />

    <!-- Showcases -->
    <property name="showcases.testsuite.dir" value="${basedir}/samples/testsuite-showcases" />

    <!-- XLT Test Suite -->
    <property name="xlt.testsuite.dir" value="${basedir}/samples/testsuite-xlt" />

    <!-- *** Target definitions *** -->

    <!-- Build initialization. -->
    <target name="test.init" unless="test.init.run">
        <condition property="classpath.set">
            <and>
                <isreference refid="classpath" />
                <isreference refid="maven-resolver-ant-tasks.classpath" />
                <isset property="build.doc.dir" />
            </and>
        </condition>

        <fail unless="classpath.set" message="This project cannot be run stand-alone." />

        <typedef resource="org/apache/maven/resolver/ant/antlib.xml" uri="antlib:org.apache.maven.resolver.ant" classpathref="maven-resolver-ant-tasks.classpath" />

        <!-- redefine default Maven repo to be used with https -->
        <resolver:remoterepos id="resolver.repositories.test">
            <resolver:remoterepo url="https://repo1.maven.org/maven2/" />
        </resolver:remoterepos>

        <resolver:pom id="xlt.pom" file="pom.xml" />

        <resolver:dependencies id="depsFromPom" pomRef="xlt.pom" />

        <resolver:resolve dependenciesref="depsFromPom" remotereposref="resolver.repositories.test">
            <files refid="test.fileset" scopes="test" />
        </resolver:resolve>

        <path id="test.classpath">
            <pathelement location="${test.classes.dir}" />
            <pathelement location="${test-hu.classes.dir}" />
            <resources refid="test.fileset" />
            <path refid="classpath" />
        </path>

        <!-- Fileset that contains all tests. -->
        <fileset id="tests" dir="${src.dir}/test/java">
            <include name="**/*Test.java" />
            <exclude name="**/AbstractHtmlUnitTest.java" />
            <exclude name="**/AbstractHtmlTest.java" />
        </fileset>

        <!-- PMD -->
        <taskdef name="pmd" description="PMD Ant task definition" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="test.classpath" />

        <!-- Cobertura -->
        <taskdef format="properties" description="Task definitions for Cobertura" resource="tasks.properties" classpathref="test.classpath" />

        <!-- Checkstyle -->
        <taskdef format="properties" resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" description="Task definitions for Checkstyle." classpathref="test.classpath" />

        <property name="test.init.run" value="true" />

    </target>

    <target name="test.compile" depends="test.init">
        <mkdir dir="${test.classes.dir}" />

        <javac srcdir="${src.dir}/test/java" includeantruntime="no" destdir="${test.classes.dir}" debug="on" optimize="off" deprecation="on" encoding="utf8" source="1.8" target="1.8">
            <classpath refid="test.classpath" />
        </javac>

        <copy todir="${test.classes.dir}">
            <fileset dir="${src.dir}/test/resources">
                <include name="**/*" />
            </fileset>
            <fileset dir="${src.dir}/test/java">
                <exclude name="**/*.java" />
            </fileset>
        </copy>

    </target>

    <!-- Brings up an HTTP Server needed for HTTP-based tests. -->
    <target name="test.jetty" depends="test.compile">

        <path id="jetty.classpath">
            <fileset dir="${jetty.lib.dir}">
                <include name="*.jar" />
            </fileset>
        </path>

        <!-- Create log directory if it doesn't exist yet (server won't start otherwise) -->
        <mkdir dir="${jetty.dir}/logs" />

        <!-- Copy the Posters WAR -->
        <copy tofile="${jetty.dir}/webapps/posters.war">
            <fileset dir="target/downloads" includes="demo-poster*.war" />
        </copy>

        <parallel>
            <daemons>
                <java jar="${jetty.dir}/start.jar" fork="yes" dir="${jetty.dir}" maxmemory="512m" />
            </daemons>

            <sequential>
                <!-- wait for the http server to finish startup -->
                <waitfor maxwait="30" maxwaitunit="second">
                    <http url="http://localhost:8080/posters" />
                </waitfor>

                <!-- run the posters tests -->
                <ant dir="${posters.testsuite.dir}" inheritall="false" inheritrefs="false">
                    <target name="clean" />
                    <target name="test" />
                </ant>
                <copy todir="${reports.junit.xml}">
                    <fileset dir="${posters.testsuite.dir}/results" includes="TEST-*.xml" />
                </copy>

                <!-- run the showcases tests -->
                <ant dir="${showcases.testsuite.dir}" inheritall="false" inheritrefs="false">
                    <target name="clean" />
                    <target name="test" />
                </ant>
                <copy todir="${reports.junit.xml}">
                    <fileset dir="${showcases.testsuite.dir}/results" includes="TEST-*.xml" />
                </copy>

                <!-- run the XLT tests -->
                <ant dir="${xlt.testsuite.dir}" inheritall="false" inheritrefs="false">
                    <reference refid="junit.classpath" />
                    <target name="clean" />
                    <target name="test" />
                </ant>
                <copy todir="${reports.junit.xml}">
                    <fileset dir="${xlt.testsuite.dir}/results" includes="TEST-*.xml" />
                </copy>

            </sequential>

        </parallel>

    </target>

    <!-- Executes all tests, builds summary report -->
    <target name="test.execute" depends="test.init">
        <path id="junit.classpath">
            <path refid="test.classpath" />
        </path>

        <antcall target="test.run" inheritall="true" inheritrefs="true" />
    </target>

    <target name="test.instrument" depends="test.init">
        <mkdir dir="${instrumented.classes.dir}" />

        <!-- instrument -->
        <!--
        <cobertura-instrument datafile="${basedir}/cobertura.ser" todir="${instrumented.classes.dir}">
            <fileset dir="${classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/test/**/*.class" />
                <exclude name="**/*Test.class" />
                <exclude name="com/xceptance/xlt/license/**/*.class" />
                <exclude name="com/gargoylesoftware/**/*.class" />
                <exclude name="org/openqa/selenium/**/*.class" />
                <exclude name="org/pegdown/**/*.class" />
            </fileset>
        </cobertura-instrument>
        -->

        <!-- set JUnit classpath -->
        <path id="junit.classpath">
            <pathelement location="${instrumented.classes.dir}" />
            <path refid="test.classpath" />
        </path>

    </target>

    <!-- Instrument compiled classes, runs all tests and generates coverage report. -->
    <target name="test.execute.coverage" depends="test.instrument">

        <!-- Run tests. -->
        <antcall target="test.run" inheritall="true" inheritrefs="true" />
        <antcall target="test.jetty" inheritall="true" inheritrefs="true" />

        <!-- Generate cobertura report. -->
        <!--
        <cobertura-report datafile="${basedir}/cobertura.ser" destdir="${reports.coverage.html}" srcdir="${src.dir}" />
        <cobertura-report format="xml" datafile="${basedir}/cobertura.ser" srcdir="${src.dir}" destdir="${reports.coverage}" />
        -->

        <!-- Remove instrumented classes. -->
        <delete dir="${instrumented.classes.dir}" />

    </target>


    <!-- Run PMD for checking the code. -->
    <target name="test.pmd" depends="test.pmd.check" unless="test.pmd.results.available">
        <mkdir dir="${reports.pmd}" />
        <pmd shortfilenames="true">
            <ruleset>
                category/java/bestpractices.xml,
                category/java/codestyle.xml,
                category/java/design.xml,
                category/java/errorprone.xml,
                category/java/multithreading.xml,
                category/java/performance.xml,
                category/java/security.xml
            </ruleset>
            <formatter type="xml" toFile="${reports.pmd}/pmd.xml" />
            <formatter type="html" toFile="${reports.pmd}/index.html" />
            <fileset dir="${src.dir}/main/java">
                <include name="com/xceptance/**/*.java" />
            </fileset>
        </pmd>
    </target>


    <!-- Checkstyle tests -->
    <target name="test.checkstyle" depends="test.init, test.checkstyle.check" unless="test.checkstyle.results.available">
        <!-- create checkstyle report directories -->
        <mkdir dir="${reports.checkstyle.xml}" />
        <mkdir dir="${reports.checkstyle.html}" />

        <!-- run checkstyle on the sources -->
        <checkstyle config="ant-scripts/checkstyle_checks.xml" failureProperty="checkstyle.failure" failOnViolation="false">

            <formatter type="xml" tofile="${reports.checkstyle.xml}/checkstyle_report.xml" />

            <fileset dir="${src.dir}/main/java">
                <include name="com/xceptance/**/*.java" />
            </fileset>

        </checkstyle>

        <!-- final transformation of checkstyle report -->
        <xslt classpathref="classpath" in="${reports.checkstyle.xml}/checkstyle_report.xml" out="${reports.checkstyle.html}/checkstyle_report.html" style="${styles.dir}/checkstyle-noframes.xsl" />
    </target>

    <!-- Analytics target -->
    <target name="test.analytics" depends="test.init,test.pmd,test.checkstyle" />

    <!-- Runs all tests and performs code analysis (static and dynamic). -->
    <target name="test.full" depends="test.analytics, test.execute.coverage, test.junit.report" />

    <!-- Remove all test related files. -->
    <target name="test.clean">
        <delete file="${basedir}/cobertura.ser" />
        <delete dir="${reports.checkstyle}" />
        <delete dir="${reports.coverage}" />
        <delete dir="${reports.jslint}" />
        <delete dir="${reports.junit}" />
        <delete dir="${reports.pmd}" />
        <delete dir="${instrumented.classes.dir}" />
    </target>

    <target name="test.run" depends="test.compile">
        <mkdir dir="${reports.junit.xml}" />

        <junit forkmode="once" fork="yes" printsummary="on">
            <sysproperty key="net.sourceforge.cobertura.datafile" value="${basedir}/cobertura.ser" />
            <jvmarg value="--add-opens=java.base/java.lang=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.lang.reflect=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.util=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.util.regex=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/java.io=ALL-UNNAMED" />
            <jvmarg value="--add-opens=java.base/sun.nio.fs=ALL-UNNAMED" />

            <!-- set classpath -->
            <classpath refid="junit.classpath" />

            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports.junit.xml}">
                <fileset refid="tests" />
            </batchtest>
        </junit>

    </target>

    <target name="test.junit.report">
        <!-- create JUnit HTML output directory -->
        <mkdir dir="${reports.junit.html}" />

        <!-- create JUnit HTML report -->
        <junitreport todir="${reports.junit.html}">
            <fileset dir="${reports.junit.xml}" includes="TEST-*.xml" />
            <report format="frames" todir="${reports.junit.html}" />
        </junitreport>

    </target>


    <!-- *** Checker definitions *** -->


    <!-- Check if PMD was run before and results are up-to-date -->
    <target name="test.pmd.check">
        <mkdir dir="${reports.pmd}" />

        <dependset>
            <srcfileset dir="${src.dir}" includes="com/xceptance/**/*.java" />
            <targetfileset dir="${reports.pmd}" includes="**/*" />
        </dependset>

        <condition property="test.pmd.results.available">
            <resourcecount when="gt" count="0">
                <fileset dir="${reports.pmd}" includes="**/*" />
            </resourcecount>
        </condition>

    </target>

    <!-- Check if CheckStyle was run before and results are up-to-date -->
    <target name="test.checkstyle.check">
        <mkdir dir="${reports.checkstyle}" />

        <dependset>
            <srcfileset dir="${src.dir}" includes="**/*.java" />
            <targetfilelist dir="${reports.checkstyle}">
                <file name="html/checkstyle_report.html" />
                <file name="xml/checkstyle_report.xml" />
            </targetfilelist>
        </dependset>

        <condition property="test.checkstyle.results.available">
            <and>
                <available file="${reports.checkstyle.html}/checkstyle_report.html" type="file" />
                <available file="${reports.checkstyle.xml}/checkstyle_report.xml" type="file" />
            </and>
        </condition>
    </target>

    <!-- *** HtmlUnit tests *** -->

    <!--
            Compiles the Java sources in ${src-test-hu.dir} to ${classes.dir}. Any non-Java file in the sources
            dir will be copied there, too.
        -->
    <target name="test.compile-hu" description="Generates HtmlUnit test class files." depends="test.init">
        <mkdir dir="${test-hu.classes.dir}" />

        <javac srcdir="${src-test-hu.dir}/java" destdir="${test-hu.classes.dir}" debug="on" optimize="off" deprecation="on" encoding="utf8" includeantruntime="false" source="1.8" target="1.8">
            <classpath refid="test.classpath" />
        </javac>

        <copy todir="${test-hu.classes.dir}">
            <fileset dir="${src-test-hu.dir}/java">
                <exclude name="**/*.java" />
            </fileset>
            <fileset dir="${src-test-hu.dir}/resources">
                <include name="**/*" />
            </fileset>
        </copy>

    </target>

    <target name="test.run-hu" description="Executes the HtmlUnit JUnit tests." depends="test.compile-hu">
        <mkdir dir="${reports.junit-hu.xml}" />

        <makeurl file="${basedir}/${src-test-hu.dir}/resources/log4j.properties" property="hu-log4j.url" />
        <junit forkmode="once" printsummary="on" fork="on" showoutput="on">
            <!-- set classpath -->
            <classpath refid="test.classpath" />

            <jvmarg value="-Dlog4j.configuration=${hu-log4j.url}" />

            <formatter type="xml" />

            <batchtest todir="${reports.junit-hu.xml}">
                <fileset dir="${src-test-hu.dir}/java">
                    <include name="**/*Test.java" />
                    <exclude name="**/Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test.junit-hu.report">
        <!-- create JUnit HTML output directory -->
        <mkdir dir="${reports.junit-hu.html}" />

        <!-- create JUnit HTML report -->
        <junitreport todir="${reports.junit-hu.html}">
            <fileset dir="${reports.junit-hu.xml}" includes="TEST-*.xml" />
            <report format="frames" todir="${reports.junit-hu.html}" />
        </junitreport>

    </target>

    <target name="test.execute-hu" description="Executes the HtmlUnit JUnit tests and generates a HTML report." depends="test.run-hu, test.junit-hu.report">
        <!-- Just be dependent -->
    </target>

</project>
